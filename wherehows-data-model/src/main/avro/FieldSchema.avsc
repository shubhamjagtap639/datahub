{
  "type": "record",
  "name": "FieldSchema",
  "namespace": "com.linkedin.events.metadata",
  "doc": "Abstracted field schema in tabular model.",
  "fields": [
    {
      "name": "position",
      "type": "int",
      "doc": "Field position id, SORT_ID. Starting from 1"
    },
    {
      "name": "parentFieldPosition",
      "type": "int",
      "doc": "Position id of the parent field for nested structure. 0 means this field is a top-level field"
    },
    {
      "name": "fieldPath",
      "type": "string",
      "doc": "For example, <grand_grand_parent>.<grand_parent>.<parent>.<name>. See http://go/tms/schema for more details."
    },
    {
      "name": "fieldJsonPath",
      "type": [ "null", "string" ],
      "doc": "http://goessner.net/articles/JsonPath this is an alternative for fieldPath. For example, $.store.book[0].title"
    },
    {
      "name": "label",
      "type": [ "null", "string" ],
      "doc": "Field title/label for display"
    },
    {
      "name": "aliases",
      "type": [ "null", {
          "type": "array",
          "items": "string"
        }
      ],
      "doc": "Field aliases."
    },
    {
      "name": "type",
      "type": "string",
      "doc": "native data type"
    },
    {
      "name": "logicalType",
      "type": [ "null", "string" ],
      "doc": "when the native type is too generic, logical data type is specified. e.g. DateTime, NUMBER(15,2), GUID, Epoch(3), Epoch(0)"
    },
    {
      "name": "semanticType",
      "type": [ "null", "string" ],
      "doc": "[Deprecated] Do not use this field"
    },
    {
      "name": "abstractType",
      "type": [ "null", {
          "type": "enum",
          "name": "AbstractDataType",
          "symbols": [ "STRING", "NUMBER", "BINARY", "BOOLEAN", "TIMESTAMP", "ARRAY", "MAP", "STRUCT", "UNION" ],
          "symbolDocs": {
            "STRING": "covers CHAR, VARCHAR(n), CHARARRAY, STRING, UTF, JSON, XML, CLOB",
            "NUMBER": "covers BYTEINT, SMALLINT, SHORT, INT, BIGINT, LONG, FLOAT, DOUBLE, MONEY, DECIMAL(x,y), NUMBER(x,y)",
            "BINARY": "covers BYTE, VARBYTE(n), BINARY, BYTEARRAY, FIXED, IMAGE, BSON, BLOB",
            "BOOLEAN": "covers BOOL, BOOLEAN, CHAR(1) with value Y/N or T/F, BIT",
            "TIMESTAMP": "covers INT/LONG for epoch(n), DATE, TIME, DATETIME, TIMESTAMP, TIMESTAMP WITH TIMEZONE, STRING with YYYYMMDD or YYYY-MM-DD HH:MI:SS format, INTERVAL, CALENDAR",
            "ARRAY": "covers LIST, REPEAT, ARRAY",
            "MAP": "covers HASHMAP, DICT, MAP",
            "STRUCT": "covers RECORD, CLASS, UDT (User Defined Type), STRUCT",
            "UNION": "covers UNIONTYPE, UNION"
          }
        }
      ],
      "doc": "Standard types to generate canonical schema abstraction. Hide the subtle difference."
    },
    {
      "name": "description",
      "type": [ "null", "string" ],
      "doc": "field comment/description"
    },
    {
      "name": "nullable",
      "type": "boolean",
      "default": true,
      "doc": "Is the field nullable"
    },
    {
      "name": "defaultValue",
      "type": [ "null", "string" ],
      "doc": "default value"
    },
    {
      "name": "maxByteLength",
      "type": [ "null", "int" ],
      "doc": "max length in bytes. For UTF8, maxByteLength = maxCharLength x 3"
    },
    {
      "name": "maxCharLength",
      "type": [ "null", "int" ],
      "doc": "max length in characters"
    },
    {
      "name": "charType",
      "type": [ "null", "string" ],
      "doc": "ascii, utf8, utf16, latin, etc. https://en.wikipedia.org/wiki/Character_encoding"
    },
    {
      "name": "precision",
      "type": [ "null", "int" ],
      "doc": "number(p,s)"
    },
    {
      "name": "scale",
      "type": [ "null", "int" ],
      "doc": "number(p,s)"
    },
    {
      "name": "isRecursive",
      "type": "boolean",
      "doc": "Does this field contains recursive structure?"
    }
  ]
}
