apply plugin: 'java'

configurations {
  avro17

  validationCompile
  validationCompile.extendsFrom testCompile

  validationRuntime
  validationRuntime.extendsFrom testRuntime
}

dependencies {
  compile externalDependency.kafkaSchemaRegistry

  compileOnly project(':metadata-events:mxe-avro-1.7')

  validationCompile externalDependency.avroMigrationHelper
  validationCompile externalDependency.testng

  avro17 project(':metadata-events:mxe-avro-1.7')
}

//////////////////////////////////////
// Schema compatibility validation
//////////////////////////////////////
sourceSets {
  validation {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/validation/java')
    }
  }
}

idea {
  module {
    testSourceDirs += file("src/validation/java")
  }
}

task validate17(type: Test, dependsOn: configurations.avro17) {
  testLogging.events 'standard_out'
  testClassesDirs = sourceSets.validation.output.classesDirs
  classpath = files(sourceSets.validation.runtimeClasspath, configurations.avro17)

  // Prevent gradle from caching each validation run
  outputs.upToDateWhen { false }
}

// Make sure validate17 are run as part of gradle build
check.dependsOn += [validate17]

//////////////////////////////////////
// Schema registration
//////////////////////////////////////
def mainClassName = 'com.linkedin.mxe.RegisterSchemas'

task register17(type: JavaExec, dependsOn: [configurations.compile, configurations.avro17]) {
  main = mainClassName
  classpath = files(sourceSets.main.runtimeClasspath, configurations.avro17)
}
