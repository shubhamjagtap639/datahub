# Extending the GQL type system to include Long type used for dates
scalar Long

schema {
    query: Query
    mutation: Mutation
}

"""
Top-level GMS Entity
"""
interface Entity {
    """
    GMS Entity urn
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!
}

"""
Top-level GMS Entity Type
"""
enum EntityType {
    """
    The Dataset Entity
    """
    DATASET
    """
    The CorpUser Entity
    """
    CORP_USER
    """
    The DataPlatform Entity
    """
    DATA_PLATFORM
    """
    The Dashboard Entity
    """
    DASHBOARD
    """
    The Chart Entity
    """
    CHART
}

type Query {
    """
    Fetch a Dataset by primary key
    """
    dataset(urn: String!): Dataset

    """
    Fetch a CorpUser by primary key
    """
    corpUser(urn: String!): CorpUser

    """
    Fetch a Dashboard by primary key
    """
    dashboard(urn: String!): Dashboard

    """
    Fetch a Chart by primary key
    """
    chart(urn: String!): Chart

    """
    Search DataHub entities
    """
    search(input: SearchInput!): SearchResults

    """
    Autocomplete a search query against DataHub entities
    """
    autoComplete(input: AutoCompleteInput!): AutoCompleteResults

    """
    Browse DataHub entities by path
    """
    browse(input: BrowseInput!): BrowseResults

    """
    Retrieve the browse path(s) corresponding to an entity
    """
    browsePaths(input: BrowsePathsInput!): [BrowsePath!]
}

type Mutation {
    updateDataset(input: DatasetUpdateInput!): Dataset
}

type AuditStamp {
    """
    When the audited action took place
    """
    time: Long!

    """
    Who performed the audited action
    """
    actor: String
}

type Dataset implements Entity {
    """
    The unique Dataset URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    Standardized platform urn where the dataset is defined
    """
    platform: DataPlatform!

    """
    Dataset native name
    """
    name: String!

    """
    Fabric type where dataset belongs to or where it was generated
    """
    origin: FabricType!

    """
    Human readable description for dataset
    """
    description: String

    """
    The native format for the data platform
    """
    platformNativeType: PlatformNativeType

    """
    Native Dataset Uri. Uri should not include any environment specific properties
    """
    uri: String

    """
    Tags used for searching dataset
    """
    tags: [String!]!

    """
    A list of platform-specific metadata tuples
    """
    properties: [StringMapEntry!]

    """
    Ownership metadata of the dataset
    """
    ownership: Ownership

    """
    The dataset deprecation status
    """
    deprecation: DatasetDeprecation

    """
    References to internal resources related to the dataset
    """
    institutionalMemory: InstitutionalMemory

    """
    Schema metadata of the dataset
    """
    schema: Schema

    """
    Status metadata of the dataset
    """
    status: Status

    """
    Upstream Lineage metadata of the dataset
    """
    upstreamLineage: UpstreamLineage

    """
    Downstream Lineage metadata of the dataset
    """
    downstreamLineage: DownstreamLineage
}

type DataPlatform implements Entity {
    """
    Urn of the data platform
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    Name of the data platform
    """
    name: String!

    """
    Metadata associated with a dataplatform
    """
    info: DataPlatformInfo
}

type DataPlatformInfo {
    """
    The Platform Type
    """
    type: PlatformType!

    """
    Display name associated with the platform
    """
    displayName: String

    """
    The delimiter in the dataset names on the data platform
    """
    datasetNameDelimiter: String!

    """
    A logo URL associated with the platform
    """
    logoUrl: String
}

enum PlatformType {
    """
    Value for a file system
    """
    FILE_SYSTEM

    """
    Value for a key value store
    """
    KEY_VALUE_STORE

    """
    Value for a message broker
    """
    MESSAGE_BROKER

    """
    Value for an object store
    """
    OBJECT_STORE

    """
    Value for an OLAP datastore
    """
    OLAP_DATASTORE

    """
    Value for a query engine
    """
    QUERY_ENGINE

    """
    Value for a relational database
    """
    RELATIONAL_DB

    """
    Value for a search engine
    """
    SEARCH_ENGINE

    """
    Value for other platforms
    """
    OTHERS
}

enum FabricType {
    """
    Designates development fabrics
    """
    DEV

    """
    Designates early-integration (staging) fabrics
    """
    EI

    """
    Designates production fabrics
    """
    PROD

    """
    Designates corporation fabrics
    """
    CORP
}

type DatasetDeprecation {
    """
    Whether the dataset has been deprecated by owner
    """
    deprecated: Boolean!

    """
    The time user plan to decommission this dataset
    """
    decommissionTime: Long

    """
    Additional information about the dataset deprecation plan
    """
    note: String!

    """
    The user who will be credited for modifying this deprecation content
    """
    actor: String
}

type InstitutionalMemory {
    """
    List of records that represent the institutional memory (internal documentation) of an entity
    """
    elements: [InstitutionalMemoryMetadata!]!
}

type InstitutionalMemoryMetadata {
    """
    Link to a document or wiki page or another internal resource
    """
    url: String!

    """
    Description of the resource
    """
    description: String!

    """
    The author of this metadata
    """
    author: String!

    """
    An AuditStamp corresponding to the creation of this resource
    """
    created: AuditStamp!
}

type Schema {
    """
    Dataset this schema metadata is associated with
    """
    datasetUrn: String

    """
    Schema name
    """
    name: String!

    """
    Platform this schema metadata is associated with
    """
    platformUrn: String!

    """
    The version of the GMS Schema metadata
    """
    version: Long!

    """
    The cluster this schema metadata is derived from
    """
    cluster: String

    """
    The SHA1 hash of the schema content
    """
    hash: String!

    """
    The native schema in the datasets platform, schemaless if it was not provided
    """
    platformSchema: PlatformSchema
    """
    Client provided a list of fields from value schema
    """
    fields: [SchemaField!]!
    """
    Client provided list of fields that define primary keys to access record
    """
    primaryKeys: [String!]
}

union PlatformSchema = TableSchema | KeyValueSchema

type TableSchema {
    """
    Raw table schema
    """
    schema: String!
}

type KeyValueSchema {
    """
    Raw key schema
    """
    keySchema: String!
    """
    Raw value schema
    """
    valueSchema: String!
}

type SchemaField {
    """
    Flattened name of the field computed from jsonPath field
    """
    fieldPath: String!
    """
    Flattened name of a field in JSON Path notation
    """
    jsonPath: String
    """
    Indicates if this field is optional or nullable
    """
    nullable: Boolean!
    """
    Description of the field
    """
    description: String
    """
    Platform independent field type of the field
    """
    type: SchemaFieldDataType!
    """
    The native type of the field in the datasets platform as declared by platform schema
    """
    nativeDataType: String
    """
    Whether the field references its own type recursively
    """
    recursive: Boolean!
}

enum SchemaFieldDataType {
    BOOLEAN
    FIXED
    STRING
    BYTES
    NUMBER
    ENUM
    NULL
    MAP
    ARRAY
    UNION
    STRUCT
}

type UpstreamLineage {
    """
    List of upstream datasets
    """
    upstreams: [RelatedDataset!]!
}

type DownstreamLineage {
    """
    List of downstream datasets
    """
    downstreams: [RelatedDataset!]!
}

type RelatedDataset {
    """
    The upstream dataset the lineage points to
    """
    dataset: Dataset!
    """
    The type of the lineage
    """
    type: DatasetLineageType!
    """
    When the lineage was created
    """
    created: AuditStamp!
}

enum DatasetLineageType {
    """
    Direct copy without modification
    """
    COPY
    """
    Transformed dataset
    """
    TRANSFORMED
    """
    Represents a view defined on the sources
    """
    VIEW
}

type Status {
    """
    Whether the entity is removed or not
    """
    removed: Boolean!
}

enum PlatformNativeType {
    """
    Table
    """
    TABLE

    """
    View
    """
    VIEW

    """
    Directory in file system
    """
    DIRECTORY

    """
    Stream
    """
    STREAM

    """
    Bucket in key value store
    """
    BUCKET
}

type StringMapEntry {
    key: String!
    value: String
}

type Ownership {
    """
    List of owners of the entity
    """
    owners: [Owner!]

    """
      Audit stamp containing who last modified the record and when
    """
    lastModified: AuditStamp!
}

enum OwnershipSourceType {
    """
    Auditing system or audit logs
    """
    AUDIT
    """
    Database, e.g. GRANTS table
    """
    DATABASE
    """
    File system, e.g. file/directory owner
    """
    FILE_SYSTEM
    """
    Issue tracking system, e.g. Jira
    """
    ISSUE_TRACKING_SYSTEM
    """
    Manually provided by a user
    """
    MANUAL
    """
    Other ownership-like service, e.g. Nuage, ACL service etc
    """
    SERVICE
    """
    SCM system, e.g. GIT, SVN
    """
    SOURCE_CONTROL
    """
    Other sources
    """
    OTHER
}

type OwnershipSource {
    """
    The type of the source
    """
    type: OwnershipSourceType!

    """
    A reference URL for the source
    """
    url: String
}

enum OwnershipType {
    """
    A person or group that is in charge of developing the code
    """
    DEVELOPER

    """
    A person or group that is owning the data
    """
    DATAOWNER

    """
    A person or a group that overseas the operation, e.g. a DBA or SRE.
    """
    DELEGATE

    """
    A person, group, or service that produces/generates the data
    """
    PRODUCER

    """
    A person, group, or service that consumes the data
    """
    CONSUMER

    """
    A person or a group that has direct business interest
    """
    STAKEHOLDER
}

type Owner {
    """
    Owner object - This should be extended to support CorpGroups as well
    """
    owner: CorpUser!

    """
    The type of the ownership
    """
    type: OwnershipType!

    """
    Source information for the ownership
    """
    source: OwnershipSource
}

type CorpUser implements Entity {
    """
    The unique user URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    Username of the corp user
    """
    username: String!

    """
    Readable info about the corp user
    """
    info: CorpUserInfo

    """
    Writable info about the corp user
    """
    editableInfo: CorpUserEditableInfo
}

type CorpUserInfo {
    """
    Whether the user is active
    """
    active: Boolean!

    """
    Display name of the user
    """
    displayName: String

    """
    Email address of the user
    """
    email: String!

    """
    Title of the user
    """
    title: String

    """
    Direct manager of the user
    """
    manager: CorpUser

    """
    department id the user belong to
    """
    departmentId: Long

    """
    department name this user belong to
    """
    departmentName: String

    """
    first name of the user
    """
    firstName: String

    """
    last name of the user
    """
    lastName: String

    """
    Common name of this user, format is firstName plus lastName
    """
    fullName: String

    """
    two uppercase letters country code
    """
    countryCode: String
}

type CorpUserEditableInfo {
    """
    About me section of the user
    """
    aboutMe: String

    """
    Teams that the user belongs to
    """
    teams: [String!]

    """
    Skills that the user possesses
    """
    skills: [String!]

    """
    A URL which points to a picture which user wants to set as a profile photo
    """
    pictureLink: String
}

input SearchInput {
    """
    Entity type to be searched
    """
	type: EntityType!

	"""
	The query string
	"""
	query: String!

	"""
	The starting point of paginated results
	"""
	start: Int

	"""
	The number of elements included in the results
	"""
	count: Int

	"""
	Faceted filters applied to search results
	"""
	filters: [FacetFilterInput!]
}

input FacetFilterInput {
    """
    Name of field to filter by
    """
	field: String!

	"""
	Value of the field to filter by
	"""
	value: String!
}

type SearchResults {
    """
    The starting point of paginated results
    """
    start: Int!

    """
    The number of elements included in the results
    """
    count: Int!

    """
    The total number of search results matching the query and filters
    """
    total: Int!

    """
    The search results
    """
    entities: [Entity!]!

    """
    Field aggregations used for faceted search
    """
    facets: [FacetMetadata!]
}

type FacetMetadata {
    """
    Name of a field present in the search entity
    """
    field: String!

    """
    Aggregated search result counts by value of the field
    """
    aggregations: [AggregationMetadata!]!
}

type AggregationMetadata {
    """
    A particular value of a facet field
    """
    value: String!

    """
    The number of search results containing the value
    """
    count: Long!
}

input AutoCompleteInput {
    """
    Entity type to be autocompleted against
    """
	type: EntityType!

	"""
	The query string
	"""
	query: String!

	"""
	An optional field to autocomplete against
	"""
	field: String

	"""
	The maximum number of autocomplete results
	"""
	limit: Int

	"""
	Faceted filters applied to autocomplete results
	"""
	filters: [FacetFilterInput!]
}

type AutoCompleteResults {
	"""
	The query string
	"""
	query: String!

	"""
	The autocompletion results
	"""
	suggestions: [String!]!
}

input BrowseInput {
    """
    The browse entity type
    """
	type: EntityType!

	"""
	The browse path.. Should this be an array?
	"""
	path: [String!]

    """
    The starting point of paginated results
    """
	start: Int

    """
    The number of elements included in the results
    """
	count: Int

    """
    Faceted filters applied to browse results
    """
	filters: [FacetFilterInput!]
}

type BrowseResults {
    """
    The browse results
    """
	entities: [Entity!]!

    """
    The starting point of paginated results
    """
	start: Int!

    """
    The number of elements included in the results
    """
	count: Int!

    """
    The total number of browse results under the path with filters applied
    """
	total: Int!

    """
    Metadata containing resulting browse groups
    """
	metadata: BrowseResultMetadata!
}

type BrowseResultMetadata {
    """
    The provided path
    """
	path: [String!]!
	"""
	The groups present at the provided browse path
	"""
	groups: [BrowseResultGroup!]!
    """
    The total number of entities under the provided browse path
    """
	totalNumEntities: Long!
}

type BrowseResultGroup {
    """
    The path name of a group of browse results
    """
  	name: String!

  	"""
  	The number of entities within the group
  	"""
  	count: Long!
}

input BrowsePathsInput {
    """
    The browse entity type
    """
	type: EntityType!

	"""
	The entity urn
	"""
	urn: String!
}

type BrowsePath {
    """
    The components of the browse path
    """
	path: [String!]!
}

input DatasetUpdateInput {
    """
    The dataset urn
    """
   urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to deprecation status
    """
    deprecation: DatasetDeprecationUpdate

    """
    Update to institutional memory, ie documentation
    """
    institutionalMemory: InstitutionalMemoryUpdate
}

input OwnershipUpdate {
    """
    The list of owners
    """
   owners: [OwnerUpdate!]!
}

input OwnerUpdate {
    """
    The owner URN, eg urn:li:corpuser:1
    """
    owner: String!

    """
    The owner role type
    """
    type: OwnershipType!
}

input DatasetDeprecationUpdate {
    """
    Whether the dataset is deprecated
    """
    deprecated: Boolean!

    """
    The time user plan to decommission this dataset
    """
    decommissionTime: Long

    """
    Additional information about the dataset deprecation plan
    """
    note: String!
}

input InstitutionalMemoryUpdate {
    """
    The individual references in the institutional memory
    """
    elements: [InstitutionalMemoryMetadataUpdate!]!
}

input InstitutionalMemoryMetadataUpdate {
    """
    Link to a document or wiki page or another internal resource
    """
    url: String!

    """
    Description of the resource
    """
    description: String!

    """
    The corp user urn of the author of the metadata
    """
    author: String!

    """
    The time at which this metadata was created
    """
    createdAt: Long
}

type Dashboard implements Entity {
    """
    The unique dashboard URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    The dashboard tool name
    """
    tool: String!

    """
    An id unique within the dashboard tool
    """
    dashboardId: String!

    """
    Info about the dashboard
    """
    info: DashboardInfo

    """
    Ownership metadata of the dashboard
    """
    ownership: Ownership

    """
    Status metadata of the dashboard
    """
    status: Status
}

type DashboardInfo {
    """
    Name of the dashboard
    """
    name: String!

    """
    Description of the dashboard
    """
    description: String!

    """
    Charts that comprise the dashboard
    """
    charts: [Chart!]!

    """
    Native platform URL of the dashboard
    """
    url: String

    """
    Access level for the dashboard
    """
    access: AccessLevel

    """
    The time when this dashboard last refreshed
    """
    lastRefreshed: Long

    """
    An AuditStamp corresponding to the creation of this dashboard
    """
    created: AuditStamp!

    """
    An AuditStamp corresponding to the modification of this dashboard
    """
    lastModified: AuditStamp!

    """
    An optional AuditStamp corresponding to the deletion of this dashboard
    """
    deleted: AuditStamp
}

enum AccessLevel {
    """
    Publicly available
    """
    PUBLIC

    """
    Restricted to a subset of viewers
    """
    PRIVATE
}

type Chart implements Entity {
    """
    The unique user URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    The chart tool name
    """
    tool: String!

    """
    An id unique within the charting tool
    """
    chartId: String!

    """
    Info about the chart
    """
    info: ChartInfo

    """
    Info about the query which is used to render the chart
    """
    query: ChartQuery

    """
    Ownership metadata of the chart
    """
    ownership: Ownership

    """
    Status metadata of the chart
    """
    status: Status
}

type ChartInfo {
    """
    Name of the chart
    """
    name: String!

    """
    Description of the chart
    """
    description: String!

    """
    Data sources for the chart
    """
    inputs: [Dataset!]

    """
    Native platform URL of the chart
    """
    url: String

    """
    Access level for the chart
    """
    type: ChartType

    """
    Access level for the chart
    """
    access: AccessLevel

    """
    The time when this chart last refreshed
    """
    lastRefreshed: Long

    """
    An AuditStamp corresponding to the creation of this chart
    """
    created: AuditStamp!

    """
    An AuditStamp corresponding to the modification of this chart
    """
    lastModified: AuditStamp!

    """
    An optional AuditStamp corresponding to the deletion of this chart
    """
    deleted: AuditStamp
}

enum ChartType {
    """
    Bar graph
    """
    BAR

    """
    Pie chart
    """
    PIE

    """
    Scatter plot
    """
    SCATTER

    """
    Table
    """
    TABLE

    """
    Markdown formatted text
    """
    TEXT
}

type ChartQuery {
    """
    Raw query to build a chart from input datasets
    """
    rawQuery: String!

    """
    The type of the chart query
    """
    type: ChartQueryType!
}

enum ChartQueryType {
    """
    Standard ANSI SQL
    """
    SQL

    """
    LookML
    """
    LOOKML
}